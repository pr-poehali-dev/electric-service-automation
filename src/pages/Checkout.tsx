import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import Icon from '@/components/ui/icon';
import { useCart } from '@/contexts/CartContext';
import { calculateTotals } from '@/types/electrical';
import ProgressBar from '@/components/ProgressBar';

export default function Checkout() {
  const navigate = useNavigate();
  const { cart, createOrder } = useCart();

  const [formData, setFormData] = useState({
    phone: '',
    address: '',
    date: '',
    time: ''
  });

  const [errors, setErrors] = useState({
    phone: '',
    address: '',
    date: '',
    time: ''
  });

  const validateForm = () => {
    const newErrors = {
      phone: '',
      address: '',
      date: '',
      time: ''
    };

    if (!formData.phone) {
      newErrors.phone = '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    } else if (!/^\+?[0-9]{10,15}$/.test(formData.phone.replace(/\s/g, ''))) {
      newErrors.phone = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    }

    if (!formData.address) {
      newErrors.address = '–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å';
    }

    if (!formData.date) {
      newErrors.date = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É';
    }

    if (!formData.time) {
      newErrors.time = '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è';
    }

    setErrors(newErrors);
    return !Object.values(newErrors).some(err => err);
  };

  const handleSubmit = async () => {
    if (!validateForm()) {
      return;
    }

    const order = createOrder({
      ...formData,
      status: 'pending'
    });

    navigate('/orders', { state: { newOrderId: order.id } });
  };

  const totals = calculateTotals(cart);
  const estimatedCost = totals.totalPoints * 1150;

  if (cart.length === 0) {
    navigate('/products');
    return null;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 pb-32">
      <div className="max-w-md mx-auto">
        <div className="bg-white shadow-md p-6 space-y-4">
          <div className="flex items-center gap-4">
            <Button
              variant="ghost"
              size="icon"
              onClick={() => navigate('/cart')}
            >
              <Icon name="ArrowLeft" size={24} />
            </Button>
            <h1 className="text-2xl font-bold flex-1">–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏</h1>
          </div>

          <ProgressBar 
            currentStep={3}
            steps={['–ó–∞–¥–∞—á–∏', '–ü–ª–∞–Ω —Ä–∞–±–æ—Ç', '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ']}
          />
        </div>

        <div className="p-6 space-y-6">
          <Card className="p-6 bg-gradient-to-br from-green-50 to-green-100 border-green-200">
            <div className="flex items-center justify-between mb-4">
              <div>
                <p className="text-sm text-green-800 font-medium mb-1">üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç</p>
                <div className="text-3xl font-bold text-green-900">{estimatedCost.toLocaleString('ru-RU')} ‚ÇΩ</div>
              </div>
              <div className="text-right">
                <div className="text-sm text-green-700">–í—Å–µ–≥–æ —Ç–æ—á–µ–∫</div>
                <div className="text-2xl font-bold text-green-900">{totals.totalPoints}</div>
              </div>
            </div>
            <div className="space-y-1 text-xs text-green-700">
              <div className="flex justify-between">
                <span>–í—ã–∫–ª—é—á–∞—Ç–µ–ª–µ–π:</span>
                <span className="font-semibold">{totals.totalSwitches}</span>
              </div>
              <div className="flex justify-between">
                <span>–†–æ–∑–µ—Ç–æ–∫:</span>
                <span className="font-semibold">{totals.totalOutlets}</span>
              </div>
              <div className="flex justify-between">
                <span>–ú–µ—Ç—Ä–∞–∂ –∫–∞–±–µ–ª—è:</span>
                <span className="font-semibold">~{totals.estimatedCable} –º</span>
              </div>
            </div>
          </Card>
        </div>

        <div className="p-6 space-y-6">
          <Card className="p-6">
            <h2 className="font-bold text-lg mb-4">–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h2>
            
            <div className="space-y-4">
              <div>
                <label className="text-sm font-medium mb-2 block">
                  –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ <span className="text-red-500">*</span>
                </label>
                <input
                  type="tel"
                  placeholder="+7 (___) ___-__-__"
                  value={formData.phone}
                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                  className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent ${
                    errors.phone ? 'border-red-500' : 'border-gray-300'
                  }`}
                />
                {errors.phone && (
                  <p className="text-sm text-red-500 mt-1">{errors.phone}</p>
                )}
              </div>

              <div>
                <label className="text-sm font-medium mb-2 block">
                  –ê–¥—Ä–µ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  placeholder="–£–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞"
                  value={formData.address}
                  onChange={(e) => setFormData({ ...formData, address: e.target.value })}
                  className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent ${
                    errors.address ? 'border-red-500' : 'border-gray-300'
                  }`}
                />
                {errors.address && (
                  <p className="text-sm text-red-500 mt-1">{errors.address}</p>
                )}
              </div>
            </div>
          </Card>

          <Card className="p-6">
            <h2 className="font-bold text-lg mb-4">–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</h2>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium mb-2 block">
                  –î–∞—Ç–∞ <span className="text-red-500">*</span>
                </label>
                <input
                  type="date"
                  value={formData.date}
                  onChange={(e) => setFormData({ ...formData, date: e.target.value })}
                  min={new Date().toISOString().split('T')[0]}
                  className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent ${
                    errors.date ? 'border-red-500' : 'border-gray-300'
                  }`}
                />
                {errors.date && (
                  <p className="text-sm text-red-500 mt-1">{errors.date}</p>
                )}
              </div>

              <div>
                <label className="text-sm font-medium mb-2 block">
                  –í—Ä–µ–º—è <span className="text-red-500">*</span>
                </label>
                <input
                  type="time"
                  value={formData.time}
                  onChange={(e) => setFormData({ ...formData, time: e.target.value })}
                  className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent ${
                    errors.time ? 'border-red-500' : 'border-gray-300'
                  }`}
                />
                {errors.time && (
                  <p className="text-sm text-red-500 mt-1">{errors.time}</p>
                )}
              </div>
            </div>
          </Card>

          <Card className="p-6 bg-blue-50 border-blue-200">
            <div className="flex items-start gap-3">
              <Icon name="Info" size={20} className="text-blue-600 flex-shrink-0 mt-0.5" />
              <div className="text-sm text-blue-900">
                <p className="font-semibold mb-1">–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è?</p>
                <ul className="space-y-1 text-xs">
                  <li>‚úì –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫"</li>
                  <li>‚úì –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram</li>
                  <li>‚úì –ú–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π</li>
                </ul>
              </div>
            </div>
          </Card>
        </div>
      </div>

      <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 shadow-lg p-4">
        <div className="max-w-md mx-auto">
          <Button
            size="lg"
            className="w-full font-semibold h-14 text-base shadow-lg"
            onClick={handleSubmit}
          >
            <Icon name="CheckCircle" size={20} className="mr-2" />
            –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É
          </Button>
        </div>
      </div>
    </div>
  );
}